from pydantic import BaseModel, Field, validator
from typing import List, Optional, Dict, Any, Union
from datetime import date
from enum import Enum

class HazardType(str, Enum):
    HEATWAVE = "heatwave"
    # Can add other hazard types here later (drought, rainfall, etc.)

class RegionType(str, Enum):
    CITY = "city"
    STATE = "state"
    CUSTOM = "custom"

class Region(BaseModel):
    type: RegionType
    name: Optional[str] = None
    
    # For custom regions (lat-lon box)
    lat_min: Optional[float] = None
    lat_max: Optional[float] = None
    lon_min: Optional[float] = None
    lon_max: Optional[float] = None
    
    @validator('lat_min', 'lat_max', 'lon_min', 'lon_max', pre=True)
    def validate_coordinates(cls, v, values, **kwargs):
        if values.get('type') == RegionType.CUSTOM and v is None:
            raise ValueError("Coordinates required for custom region")
        return v
    
    @validator('name', pre=True)
    def validate_name(cls, v, values, **kwargs):
        if values.get('type') in [RegionType.CITY, RegionType.STATE] and not v:
            raise ValueError(f"Name required for {values.get('type')} region")
        return v

class WeatherDataRequest(BaseModel):
    region: Region
    start_date: date
    end_date: date
    
    @validator('end_date')
    def validate_date_range(cls, v, values):
        if 'start_date' in values and v < values['start_date']:
            raise ValueError("End date must be after start date")
        return v

class HazardAnalysisRequest(BaseModel):
    region: Region
    start_year: int = Field(..., ge=1940, le=2023)
    end_year: int = Field(..., ge=1940, le=2023)
    hazard_type: HazardType = HazardType.HEATWAVE
    
    @validator('end_year')
    def validate_year_range(cls, v, values):
        if 'start_year' in values and v < values['start_year']:
            raise ValueError("End year must be after start year")
        return v

class TimeSeriesPoint(BaseModel):
    date: str
    value: float

class HazardEvent(BaseModel):
    start_date: str
    end_date: str
    duration: int
    max_intensity: float
    avg_intensity: float

class HazardTrendAnalysis(BaseModel):
    region_name: str
    hazard_type: HazardType
    time_range: str
    
    # Summary statistics
    total_events: int
    avg_duration: float
    avg_intensity: float
    trend_slope: float
    trend_significance: float
    percent_change: float
    
    # Time series data
    annual_frequency: List[TimeSeriesPoint]
    annual_avg_duration: List[TimeSeriesPoint]
    annual_avg_intensity: List[TimeSeriesPoint]
    
    # Individual events for detailed view
    events: List[HazardEvent]
    
    # Insights (will be generated by the backend)
    insights: List[str]